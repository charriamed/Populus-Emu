using System;
using System.Collections.Generic;
using System.Linq;
using Stump.Core.IO;
using Stump.Core.Reflection;
using Stump.DofusProtocol.Types;
using Stump.ORM;
using Stump.ORM.SubSonic.SQLGeneration.Schema;
using Stump.Server.WorldServer.Core.Network;
using Stump.Server.WorldServer.Database.I18n;
using Stump.Server.WorldServer.Game.Achievements;
using Stump.Server.WorldServer.Game.Achievements.Criterions;
using Stump.DofusProtocol.D2oClasses.Tools.D2o;

namespace Stump.Server.WorldServer.Database.Achievements
{
    [D2OClass("Achievement", "com.ankamagames.dofus.datacenter.quest"), TableName("achievements_templates")]
    public class AchievementTemplate : IAutoGeneratedRecord, ISaveIntercepter, IAssignedByD2O
    {
        // FIELDS
        private const double REWARD_SCALE_CAP = 1.5;
        private const double REWARD_REDUCED_SCALE = 0.7;

        private string m_description;
        private string m_name;
        private int[] m_objectiveIds;
        private string m_objectiveIdsCSV;
        private int[] m_rewardIds;
        private string m_rewardIdsCSV;

        // PROPERTIES
        [PrimaryKey("Id", false)]
        public uint Id { get; set; }

        public uint NameId { get; set; }

        [Ignore]
        public string Name => m_name ?? (m_name = Singleton<TextManager>.Instance.GetText(NameId));

        public uint CategoryId { get; set; }

        public uint DescriptionId { get; set; }

        [Ignore]
        public string Description => m_description ?? (m_description = Singleton<TextManager>.Instance.GetText(DescriptionId));

        public int IconId { get; set; }

        public uint Points { get; set; }

        public uint Level { get; set; }

        public uint Order { get; set; }

        public double KamasRatio { get; set; }

        public double ExperienceRatio { get; set; }

        public bool KamasScaleWithPlayerLevel { get; set; }

        [Ignore]
        public int[] ObjectiveIds
        {
            get { return m_objectiveIds; }
            set
            {
                m_objectiveIds = value;
                m_objectiveIdsCSV = value.ToCSV(",");
            }
        }

        [Ignore]
        public AchievementObjectiveRecord[] Objectives { get; private set; }

        public string ObjectiveIdsCSV
        {
            get { return m_objectiveIdsCSV; }
            set
            {
                m_objectiveIdsCSV = value;
                m_objectiveIds = value.FromCSV<int>(",");
            }
        }

        [Ignore]
        public int[] RewardIds
        {
            get { return m_rewardIds; }
            set
            {
                m_rewardIds = value;
                m_rewardIdsCSV = value.ToCSV(",");
            }
        }

        [Ignore]
        public AchievementRewardRecord[] Rewards { get; private set; }

        public string RewardIdsCSV
        {
            get { return m_rewardIdsCSV; }
            set
            {
                m_rewardIdsCSV = value;
                m_rewardIds = value.FromCSV<int>(",");
            }
        }

        public virtual void AssignFields(object d2oObject)
        {
            var item = (DofusProtocol.D2oClasses.Achievement)d2oObject;
            Id = (uint)item.id;
            NameId = item.nameId;
            CategoryId = item.categoryId;
            DescriptionId = item.descriptionId;
            IconId = item.iconId;
            Points = item.points;
            Level = item.level;
            Order = item.order;
            ObjectiveIds = item.objectiveIds.ToArray();
            RewardIds = item.rewardIds.ToArray();
        }

        public void BeforeSave(bool insert)
        {
        }

        // CONSTRUCTORS

        // METHODS
        public void Initialize()
        {
            Objectives = m_objectiveIds
                .Select(entry => Singleton<AchievementManager>.Instance.TryGetAchievementObjective((uint)entry))
                .Where(entry => entry != null)
                .ToArray();

            Rewards = m_rewardIds
                .Select(entry => Singleton<AchievementManager>.Instance.TryGetAchievementReward((uint)entry))
                .Where(entry => entry != null)
                .ToArray();
        }

        public int GetKamasReward(WorldClient client)
        {
            var lvl = client.Character.Level;
            if (lvl > 200)
                lvl = 200;

            var ratio = KamasScaleWithPlayerLevel ? lvl : Level;

            return (int)((Math.Pow(ratio, 2) + 20 * ratio - 20) * KamasRatio);
        }

        public int GetExperienceReward(WorldClient client)
        {
            var lvl = client.Character.Level;
            if (lvl > 200)
                lvl = 200;

            var loc6 = (int)Rates.XpRate + lvl/*% du serveur + perso*// 100;
            if (lvl > Level)
            {
                var rewardScale = (uint)Math.Min(lvl, Level * REWARD_SCALE_CAP);

                return
                    (int)
                        ((1 - REWARD_REDUCED_SCALE) * GetFixeExperienceReward(Level, 1, ExperienceRatio) +
                         REWARD_REDUCED_SCALE * GetFixeExperienceReward(rewardScale, 1, ExperienceRatio)) * loc6;
            }

            return (int)GetFixeExperienceReward(lvl, 1, ExperienceRatio) * loc6;
        }

        private double GetFixeExperienceReward(uint param1, double param2, double param3)
        {
            return param1 * Math.Pow(100 + 2 * param1, 2) / 20 * param2 * param3;
        }

        public IEnumerable<AbstractCriterion> GetCriterions()
        {
            return Objectives.Select(entry => entry.AbstractCriterion);
        }

        public Achievement GetAchievement(PlayerAchievement player)
        {
            return new Achievement((ushort)Id,
                (from entry in Objectives
                where player.ContainsCriterion(entry.Criterion)
                select entry.GetAchievementObjective(player)).ToArray(),
                (from entry in Objectives
                where !player.ContainsCriterion(entry.Criterion)
                select entry.GetAchievementStartedObjective(player)).ToArray());
        }
    }
}