using System;
using System.Collections.Generic;
using System.Linq;
using Stump.Core.IO;
using Stump.DofusProtocol.D2oClasses.Tools.D2o;
using Stump.DofusProtocol.D2oClasses;
using Stump.ORM;
using Stump.ORM.SubSonic.SQLGeneration.Schema;
using Stump.Server.WorldServer.Game.Effects;
using Stump.Server.WorldServer.Game.Effects.Instances;
using Stump.Server.WorldServer.Game.Spells;

namespace Stump.Server.WorldServer.Database.Spells
{
    public class SpellLevelTemplateRelator
    {
        public static string FetchQuery = "SELECT * FROM spells_levels";
    }

    [TableName("spells_levels")]
    [D2OClass("SpellLevel", "com.ankamagames.dofus.datacenter.spells")]
    public class SpellLevelTemplate : IAssignedByD2O, ISaveIntercepter, IAutoGeneratedRecord
    {
        private List<EffectDice> m_criticalEffects;
        private byte[] m_criticalEffectsBin;
        private List<EffectDice> m_effects;
        private byte[] m_effectsBin;
        private SpellTemplate m_spell;
        private string m_statesForbiddenCSV;
        private string m_statesRequiredCSV;
        private string m_statesAuthorizedCSV;
        private string m_additionalEffectsZonesCSV;

        [PrimaryKey("Id", false)]
        public uint Id
        {
            get;
            set;
        }

        public uint SpellId
        {
            get;
            set;
        }

        public SpellTemplate Spell
        {
            get { return m_spell ?? (m_spell = SpellManager.Instance.GetSpellTemplate((int)SpellId)); }
        }

        public uint SpellBreed
        {
            get;
            set;
        }

        public uint ApCost
        {
            get;
            set;
        }

        public uint Range
        {
            get;
            set;
        }

        public Boolean CastInLine
        {
            get;
            set;
        }

        public Boolean CastInDiagonal
        {
            get;
            set;
        }

        public Boolean CastTestLos
        {
            get;
            set;
        }

        public uint CriticalHitProbability
        {
            get;
            set;
        }

        public string StatesRequiredCSV
        {
            get { return m_statesRequiredCSV; }
            set
            {
                m_statesRequiredCSV = value;
                StatesRequired = m_statesRequiredCSV.FromCSV<int>(",");
            }
        }

        [Ignore]
        public int[] StatesRequired
        {
            get;
            set;
        }

        public uint CriticalFailureProbability
        {
            get;
            set;
        }

        public Boolean NeedFreeCell
        {
            get;
            set;
        }

        public Boolean NeedFreeTrapCell
        {
            get;
            set;
        }

        public Boolean NeedTakenCell
        {
            get;
            set;
        }

        public Boolean RangeCanBeBoosted
        {
            get;
            set;
        }

        public int MaxStack
        {
            get;
            set;
        }

        public uint MaxCastPerTurn
        {
            get;
            set;
        }

        public uint MaxCastPerTarget
        {
            get;
            set;
        }

        public uint MinCastInterval
        {
            get;
            set;
        }

        public uint InitialCooldown
        {
            get;
            set;
        }

        public int GlobalCooldown
        {
            get;
            set;
        }

        public uint MinPlayerLevel
        {
            get;
            set;
        }

        public Boolean CriticalFailureEndsTurn
        {
            get;
            set;
        }

        public Boolean HideEffects
        {
            get;
            set;
        }

        public Boolean Hidden
        {
            get;
            set;
        }

        public uint MinRange
        {
            get;
            set;
        }

        public string StatesForbiddenCSV
        {
            get { return m_statesForbiddenCSV; }
            set
            {
                m_statesForbiddenCSV = value;
                StatesForbidden = value.FromCSV<int>(",");
            }
        }

        [Ignore]
        public int[] StatesForbidden
        {
            get;
            set;
        }

        public byte[] EffectsBin
        {
            get { return m_effectsBin; }
            set
            {
                m_effectsBin = value;
                m_effects = EffectManager.Instance.DeserializeEffects(EffectsBin).Cast<EffectDice>().ToList();
            }
        }

        [Ignore]
        public List<EffectDice> Effects
        {
            get
            {
                return m_effects ??
                       (m_effects = EffectManager.Instance.DeserializeEffects(EffectsBin).Cast<EffectDice>().ToList());
            }
            set { m_effects = value; }
        }

        public byte[] CriticalEffectsBin
        {
            get { return m_criticalEffectsBin; }
            set
            {
                m_criticalEffectsBin = value;
                m_criticalEffects =
                    EffectManager.Instance.DeserializeEffects(CriticalEffectsBin).Cast<EffectDice>().ToList();
            }
        }

        [Ignore]
        public List<EffectDice> CriticalEffects
        {
            get
            {
                return m_criticalEffects ??
                       (m_criticalEffects =
                        EffectManager.Instance.DeserializeEffects(CriticalEffectsBin).Cast<EffectDice>().ToList());
            }
            set { m_criticalEffects = value; }
        }
        public string AdditionalEffectsZonesCSV
        {
            get { return m_additionalEffectsZonesCSV; }
            set { m_additionalEffectsZonesCSV = value; }
        }
        [Ignore]
        public List<string> AdditionalEffectsZones
        {
            get
            {
                return m_additionalEffectsZonesCSV.Split(',').ToList();
            }
            set
            {
                m_additionalEffectsZonesCSV = value.ToCSV(",");
            }
        }
        public string StatesAuthorizedCSV
        {
            get { return m_statesAuthorizedCSV; }
            set { m_statesAuthorizedCSV = value; }
        }
        [Ignore]
        public int[] StatesAuthorized
        {
            get
            {
                return m_statesAuthorizedCSV.Split(',').Select(x => Convert.ToInt32(x)).ToArray();
            }
            set
            {
                m_statesAuthorizedCSV = value.ToCSV(",");
            }
        }

        #region IAssignedByD2O Members

        public void AssignFields(object d2oObject)
        {
            var spell = (SpellLevel)d2oObject;

            Id = spell.id;
            SpellId = spell.spellId;
            SpellBreed = spell.spellBreed;
            ApCost = spell.apCost;
            MinRange = spell.minRange;
            Range = spell.range;
            CastInLine = spell.castInLine;
            CastInDiagonal = spell.castInDiagonal;
            CastTestLos = spell.castTestLos;
            CriticalHitProbability = spell.criticalHitProbability;
            NeedFreeCell = spell.needFreeCell;
            NeedTakenCell = spell.needTakenCell;
            NeedFreeTrapCell = spell.needFreeTrapCell;
            RangeCanBeBoosted = spell.rangeCanBeBoosted;
            MaxStack = spell.maxStack;
            MaxCastPerTurn = spell.maxCastPerTurn;
            MaxCastPerTarget = spell.maxCastPerTarget;
            MinCastInterval = spell.minCastInterval;
            InitialCooldown = spell.initialCooldown;
            GlobalCooldown = spell.globalCooldown;
            MinPlayerLevel = spell.minPlayerLevel;
            HideEffects = spell.hideEffects;
            Hidden = spell.hidden;
            StatesRequired = spell.statesRequired.ToArray();
            StatesAuthorized = spell.statesAuthorized.ToArray();
            StatesForbidden = spell.statesForbidden.ToArray();
            AdditionalEffectsZones = spell.AdditionalEffectsZones;
            m_effectsBin = EffectManager.Instance.SerializeEffects(spell.effects);
            m_criticalEffectsBin = EffectManager.Instance.SerializeEffects(spell.criticalEffect);
        }

        #endregion

        #region ISaveIntercepter Members

        public void BeforeSave(bool insert)
        {
            m_statesForbiddenCSV = StatesForbidden.ToCSV(",");
            m_statesRequiredCSV = StatesRequired.ToCSV(",");
            //m_effectsBin = EffectManager.Instance.SerializeEffects(Effects);
            // m_criticalEffectsBin = EffectManager.Instance.SerializeEffects(CriticalEffects);
        }

        #endregion
    }
}