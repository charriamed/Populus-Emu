using System;
using System.Collections.Generic;
using System.Linq;
using Stump.Core.IO;
using Stump.DofusProtocol.D2oClasses.Tools.D2o;
using Stump.DofusProtocol.D2oClasses;
using Stump.ORM;
using Stump.ORM.SubSonic.SQLGeneration.Schema;
using Stump.Server.WorldServer.Database.I18n;
using Stump.Server.WorldServer.Game.Conditions;
using Stump.Server.WorldServer.Game.Effects;
using Stump.Server.WorldServer.Game.Effects.Instances;
using Stump.Server.WorldServer.Game.Items;
using Item = Stump.DofusProtocol.D2oClasses.Item;

namespace Stump.Server.WorldServer.Database.Items.Templates
{
    public class ItemTemplateRelator
    {
        public static string FetchQuery = "SELECT * FROM items_templates";
    }

    [TableName("items_templates")]
    [D2OClass("Item", "com.ankamagames.dofus.datacenter.items")]
    public class ItemTemplate : IAutoGeneratedRecord, IAssignedByD2O, ISaveIntercepter
    {
        public const uint EquipementCategory = 0;
        public const uint ConsumablesCategory = 1;
        public const uint RessourcesCategory = 2;
        public const uint QuestCategory = 3;
        public const uint OtherCategory = 4;
        private ConditionExpression m_criteriaExpression;
        private string m_description;
        private List<EffectBase> m_effects;
        private uint[] m_favoriteSubAreas;
        private string m_favoriteSubAreasCSV;
        private ItemSetTemplate m_itemSet;
        private string m_name;
        private List<EffectInstance> m_possibleEffects;
        private byte[] m_possibleEffectsBin;
        private uint[] m_recipeIds;
        private string m_recipeIdsCSV;
        private ItemTypeRecord m_type;

        [PrimaryKey("Id", false)]
        public int Id
        {
            get;
            set;
        }

        public uint Weight
        {
            get;
            set;
        }

        public uint RealWeight
        {
            get;
            set;
        }

        public uint NameId
        {
            get;
            set;
        }

        public string Name
        {
            get { return m_name ?? (m_name = TextManager.Instance.GetText(NameId)); }
        }

        public uint TypeId
        {
            get;
            set;
        }

        public ItemTypeRecord Type
        {
            get { return m_type ?? (m_type = ItemManager.Instance.TryGetItemType((int) TypeId)); }
        }

        public uint DescriptionId
        {
            get;
            set;
        }

        public string Description
        {
            get { return m_description ?? (m_description = TextManager.Instance.GetText(DescriptionId)); }
        }

        public int IconId
        {
            get;
            set;
        }

        public uint Level
        {
            get;
            set;
        }

        public Boolean Cursed
        {
            get;
            set;
        }

        public int UseAnimationId
        {
            get;
            set;
        }

        public Boolean Usable
        {
            get;
            set;
        }

        public Boolean Targetable
        {
            get;
            set;
        }

        public double Price
        {
            get;
            set;
        }

        public Boolean TwoHanded
        {
            get;
            set;
        }

        public Boolean Etheral
        {
            get;
            set;
        }

        public int ItemSetId
        {
            get;
            set;
        }

        [Ignore]
        public ItemSetTemplate ItemSet
        {
            get
            {
                return ItemSetId < 0
                           ? null
                           : m_itemSet ?? (m_itemSet = ItemManager.Instance.TryGetItemSetTemplate((uint) ItemSetId));
            }
        }

        [NullString]
        public String Criteria
        {
            get;
            set;
        }

        [Ignore]
        public ConditionExpression CriteriaExpression
        {
            get
            {
                if (string.IsNullOrEmpty(Criteria) || Criteria == "null")
                    return null;

                return m_criteriaExpression ?? (m_criteriaExpression = ConditionExpression.Parse(Criteria));
            }
            set
            {
                m_criteriaExpression = value;
                Criteria = value != null ? value.ToString() : null;
            }
        }

        public Boolean HideEffects
        {
            get;
            set;
        }

        public uint AppearanceId
        {
            get;
            set;
        }

        public string RecipeIdsCSV
        {
            get { return m_recipeIdsCSV; }
            set
            {
                m_recipeIdsCSV = value;
                m_recipeIds = value.FromCSV<uint>(",");
            }
        }

        [Ignore]
        public uint[] RecipeIds
        {
            get { return m_recipeIds; }
            set
            {
                m_recipeIds = value;
                m_recipeIdsCSV = value.ToCSV(",");
            }
        }

        public string FavoriteSubAreasCSV
        {
            get { return m_favoriteSubAreasCSV; }
            set
            {
                m_favoriteSubAreasCSV = value;
                m_favoriteSubAreas = value.FromCSV<uint>(",");
            }
        }

        [Ignore]
        public uint[] FavoriteSubAreas
        {
            get { return m_favoriteSubAreas; }
            set
            {
                m_favoriteSubAreas = value;
                m_favoriteSubAreasCSV = value.ToCSV(",");
            }
        }

        public Boolean BonusIsSecret
        {
            get;
            set;
        }

        public byte[] PossibleEffectsBin
        {
            get { return m_possibleEffectsBin; }
            set
            {
                m_possibleEffectsBin = value;
                m_possibleEffects = value == null ? null : value.ToObject<List<EffectInstance>>();
            }
        }

        [Ignore]
        public List<EffectInstance> PossibleEffects
        {
            get { return m_possibleEffects; }
            set
            {
                m_possibleEffects = value;
                m_possibleEffectsBin = value == null ? null : value.ToBinary(); 
                m_effects = value == null ? new List<EffectBase>() : new List<EffectBase>(PossibleEffects.Select(EffectManager.Instance.ConvertExportedEffect));
            }
        }

        [Ignore]
        public List<EffectBase> Effects
        {
            get
            {
                if (m_effects != null)
                    return m_effects;

                if (PossibleEffects == null)
                    return m_effects = new List<EffectBase>();

                return
                    m_effects =
                    new List<EffectBase>(PossibleEffects.Select(EffectManager.Instance.ConvertExportedEffect));
            }
            set { m_effects = value; }
        }

        public uint FavoriteSubAreasBonus
        {
            get;
            set;
        }

        public int CraftXpRatio
        {
            get;
            set;
        }

        public bool IsLinkedToOwner
        {
            get;
            set;
        }

        #region IAssignedByD2O Members

        public virtual void AssignFields(object d2oObject)
        {
            var template = (Item) d2oObject;
            Id = template.id;
            Weight = template.weight;
            RealWeight = template.realWeight;
            NameId = template.nameId;
            TypeId = template.typeId;
            DescriptionId = template.descriptionId;
            IconId = template.iconId;
            Level = template.level;
            Cursed = template.cursed;
            UseAnimationId = template.useAnimationId;
            Usable = template.usable;
            Targetable = template.targetable;
            Price = template.price;
            TwoHanded = template.twoHanded;
            Etheral = template.etheral;
            ItemSetId = template.itemSetId;
            Criteria = template.criteria;
            HideEffects = template.hideEffects;
            AppearanceId = template.appearanceId;
            RecipeIds = template.recipeIds.ToArray();
            FavoriteSubAreas = template.favoriteSubAreas.ToArray();
            BonusIsSecret = template.bonusIsSecret;
            PossibleEffects = template.possibleEffects;
            FavoriteSubAreasBonus = template.favoriteSubAreasBonus;
            CraftXpRatio = template.craftXpRatio;
        }

        #endregion

        #region ISaveIntercepter Members

        public void BeforeSave(bool insert)
        {
            m_possibleEffects = m_effects == null ? null : m_effects.Select(entry => entry.GetEffectInstance()).ToList();
            m_possibleEffectsBin = m_possibleEffects == null ? null : m_possibleEffects.ToBinary();
            m_favoriteSubAreasCSV = m_favoriteSubAreas.ToCSV(",");
            m_recipeIdsCSV = m_recipeIds.ToCSV(",");
        }

        #endregion

        public bool IsWeapon()
        {
            return this is WeaponTemplate;
        }

        public override string ToString()
        {
            return string.Format("{0} ({1})", Name, Id);
        }
    }
}