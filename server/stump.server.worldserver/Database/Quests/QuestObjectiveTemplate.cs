using System;
using System.Collections.Generic;
using System.Linq;
using Stump.Core.IO;
using Stump.DofusProtocol.D2oClasses;
using Stump.DofusProtocol.D2oClasses.Tools.D2o;
using Stump.DofusProtocol.Enums;
using Stump.ORM;
using Stump.ORM.SubSonic.SQLGeneration.Schema;
using Stump.Server.WorldServer.Game.Quests.Objectives;
using Stump.Server.WorldServer.Game.Actors.RolePlay.Characters;

namespace Stump.Server.WorldServer.Database.Quests
{
    public class QuestObjectiveRelator
    {
        public static string FetchQuery = "SELECT * FROM quests_objectives";
    }

    [TableName("quests_objectives")]
    public class QuestObjectiveTemplate : IAutoGeneratedRecord, IAssignedByD2O
    {
        private string m_parametersCsv;
        private int[] m_parameters;

        public int Id
        {
            get;
            set;
        }

        public int StepId
        {
            get;
            set;
        }

        public QuestObjectiveTypeEnum Type => (QuestObjectiveTypeEnum)TypeId;

        public int TypeId
        {
            get;
            set;
        }

        public int DialogId
        {
            get;
            set;
        }

        [NullString]
        public string ParametersCSV
        {
            get { return m_parametersCsv; }
            set
            {
                m_parametersCsv = value;
                m_parameters = value?.FromCSV<int>(",");
            }
        }

        [Ignore]
        public int[] Parameters
        {
            get { return m_parameters ?? (m_parameters = ParametersCSV.FromCSV<int>(",")); }
            set
            {
                m_parameters = value;
                m_parametersCsv = value?.ToCSV(",");
            }
        }

        public int Parameter0
        {
            get;
            set;
        }

        public int Parameter1
        {
            get;
            set;
        }

        public int Parameter2
        {
            get;
            set;
        }

        public int Parameter3
        {
            get;
            set;
        }

        public int Parameter4
        {
            get;
            set;
        }

        public bool DungeonOnly
        {
            get;
            set;
        }

        public int CoordsX
        {
            get;
            set;
        }

        public int CoordsY
        {
            get;
            set;
        }

        public int TriggeredByObjectiveId
        {
            get;
            set;
        }

        public bool IsTriggeredByObjective
        {
            get;
            set;
        }

        [Ignore]
        public QuestObjectiveType RealType
        {
            get;
            set;
        }

        [Ignore]
        public QuestObjectiveTemplate[] ObjectivesToTrigger
        {
            get;
            set;
        }

        public Game.Quests.QuestObjective GenerateObjective(Character character)
        {
            switch (Type)
            {
                case QuestObjectiveTypeEnum.BRING_SOULS_TO:
                    return new BringSoulsToObjective(character, this, false, Parameter0, Parameter1, Parameter2); // Parameter0 = NpcId, Parameter1 = MonsterId, Parameter2 = quantity
                case QuestObjectiveTypeEnum.BRING_ITEMS_TO:
                    return new BringItemsToObjective(character, this, false, Parameter0, Parameter2, Parameter1, false);
                case QuestObjectiveTypeEnum.GIVE_ITEMS_TO:
                    return new BringItemsToObjective(character, this, false, Parameter0, Parameter2, Parameter1, true);
                case QuestObjectiveTypeEnum.NPC_TALK:
                    return new TalkToObjective(character, this, false, Parameter0);
                case QuestObjectiveTypeEnum.NPC_TALK_BACK:
                    return new TalkToObjective(character, this, false, Parameter0);
                case QuestObjectiveTypeEnum.DEFEAT_MONSTERS_ONE_FIGHT:
                    return new DefeatMonstersObjective(character, this, false, Parameter0, Parameter1);
                case QuestObjectiveTypeEnum.DISCOVER_MAP:
                    return new DiscoverMapObjective(character, this, false, Parameter0);
                case QuestObjectiveTypeEnum.DISCOVER_AREA:
                    return new DiscoverAreaObjective(character, this, false, Parameter0);
                case QuestObjectiveTypeEnum.DEFEAT_MULTI:
                    return new DefeatMonstersObjective(character, this, false, Parameter0, Parameter1);
                case QuestObjectiveTypeEnum.CRAFT_ITEM:
                    return new CraftItemObjective(character, this, false, Parameter0, Parameter1);
                case QuestObjectiveTypeEnum.HARVEST_ITEM:
                    return new HarvestObjective(character, this, false, Parameter0, Parameter1);
                case QuestObjectiveTypeEnum.NONE:
                    return new FreeFormObjective(character, this, false);
                default:
                    throw new NotImplementedException($"Objective {Type} not implemented");
            }
        }

        public Game.Quests.QuestObjective GenerateObjective(Character character, QuestObjectiveStatus status)
        {
            switch (Type)
            {
                case QuestObjectiveTypeEnum.BRING_SOULS_TO:
                    return new BringSoulsToObjective(character, this, status, Parameter0, Parameter1, Parameter2);
                case QuestObjectiveTypeEnum.BRING_ITEMS_TO:
                    return new BringItemsToObjective(character, this, status, Parameter0, Parameter2, Parameter1, false);
                case QuestObjectiveTypeEnum.GIVE_ITEMS_TO:
                    return new BringItemsToObjective(character, this, status, Parameter0, Parameter2, Parameter1, true);
                case QuestObjectiveTypeEnum.NPC_TALK:
                    return new TalkToObjective(character, this, status, Parameter0);
                case QuestObjectiveTypeEnum.NPC_TALK_BACK:
                    return new TalkToObjective(character, this, status, Parameter0);
                case QuestObjectiveTypeEnum.DEFEAT_MONSTERS_ONE_FIGHT:
                    return new DefeatMonstersObjective(character, this, status, Parameter0, Parameter1);
                case QuestObjectiveTypeEnum.DISCOVER_MAP:
                    return new DiscoverMapObjective(character, this, status, Parameter0);
                case QuestObjectiveTypeEnum.DISCOVER_AREA:
                    return new DiscoverAreaObjective(character, this, status, Parameter0);
                case QuestObjectiveTypeEnum.DEFEAT_MULTI:
                    return new DefeatMonstersObjective(character, this, status, Parameter0, Parameter1);
                case QuestObjectiveTypeEnum.CRAFT_ITEM:
                    return new CraftItemObjective(character, this, status, Parameter0, Parameter1);
                case QuestObjectiveTypeEnum.HARVEST_ITEM:
                    return new HarvestObjective(character, this, status, Parameter0, Parameter1);
                case QuestObjectiveTypeEnum.NONE:
                    return new FreeFormObjective(character, this, status);
                default:
                    throw new NotImplementedException($"Objective {Type} not implemented");
            }
        }

        public void AssignFields(object d2oObject)
        {
            var objective = (QuestObjective)d2oObject;
            Id = (int)objective.Id;
            StepId = (int)objective.stepId;
            TypeId = (int)objective.TypeId;
            DialogId = objective.DialogId;
            Parameters = new[]
            {
                objective.Parameters.Parameter0,
                objective.Parameters.Parameter1,
                objective.Parameters.Parameter2,
                objective.Parameters.Parameter3,
                objective.Parameters.Parameter4
            }.Take((int)objective.Parameters.NumParams).ToArray();
            Parameter0 = objective.Parameters.Parameter0;
            Parameter1 = objective.Parameters.Parameter1;
            Parameter2 = objective.Parameters.Parameter2;
            Parameter3 = objective.Parameters.Parameter3;
            Parameter4 = objective.Parameters.Parameter4;
            DungeonOnly = objective.Parameters.dungeonOnly;
            CoordsX = objective.Coords.x;
            CoordsY = objective.Coords.y;
        }
    }
}