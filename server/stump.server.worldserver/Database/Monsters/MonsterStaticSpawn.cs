using System.Collections.Generic;
using Stump.ORM;
using Stump.ORM.SubSonic.SQLGeneration.Schema;
using Stump.Server.WorldServer.Database.World;
using Stump.Server.WorldServer.Game.Maps;

namespace Stump.Server.WorldServer.Database.Monsters
{
    public class MonsterStaticSpawnRelator
    {
        public static string FetchQuery = "SELECT * FROM monsters_spawns_static " +
                                          "LEFT JOIN monsters_spawns_static_groups ON monsters_spawns_static_groups.StaticSpawnId = monsters_spawns_static.Id " +
                                          "LEFT JOIN monsters_grades ON monsters_grades.Id = monsters_spawns_static_groups.MonsterGradeId";

        private MonsterStaticSpawn m_current;

        public MonsterStaticSpawn Map(MonsterStaticSpawn spawn, MonsterStaticSpawnEntity dummy, MonsterGrade grade)
        {
            if (spawn == null)
                return m_current;

            if (m_current != null && m_current.Id == spawn.Id)
            {
                m_current.GroupMonsters.Add(grade);
                return null;
            }

            var previous = m_current;

            m_current = spawn;
            m_current.GroupMonsters.Add(grade);

            return previous;
        }
    }

    /// <summary>
    /// Only used for many to many relation
    /// </summary>
    [TableName("monsters_spawns_static_groups")]
    public class MonsterStaticSpawnEntity : IAutoGeneratedRecord
    {
        [PrimaryKey("Id")]
        public int Id
        {
            get;
            set;
        }

        [Index]
        public int StaticSpawnId
        {
            get;
            set;
        }

        public int MonsterGradeId
        {
            get;
            set;
        }
    }

    [TableName("monsters_spawns_static")]
    public class MonsterStaticSpawn : IAutoGeneratedRecord
    {
        public MonsterStaticSpawn()
        {
            GroupMonsters = new List<MonsterGrade>();
        }

        private Map m_map;
        private Cell m_cell;
        private Map m_tpmap;
        private Cell m_tpcell;

        [PrimaryKey("Id")]
        public int Id
        {
            get;
            set;
        }

        public int MapId
        {
            get;
            set;
        }

        [Ignore]
        public Map Map
        {
            get { return m_map ?? (m_map = Game.World.Instance.GetMap(MapId)); }
            set
            {
                m_map = value;
                MapId = value.Id;
            }
        }

        public int CellId
        {
            get;
            set;
        }

        [Ignore]
        public Cell Cell
        {
            get { return m_cell ?? (m_cell = Map.GetCell(CellId)); }
            set
            {
                m_cell = value;
                CellId = value.Id;
            }
        }

        public uint Direction
        {
            get;
            set;
        }

        [NullString]
        public int TpMapId
        {
            get;
            set;
        }

        [Ignore]
        public Map TpMap
        {
            get { return m_tpmap ?? (m_tpmap = Game.World.Instance.GetMap(TpMapId)); }
            set
            {
                m_tpmap = value;
                TpMapId = value.Id;
            }
        }

        [NullString]
        public int TpCellId
        {
            get;
            set;
        }

        [Ignore]
        public Cell TpCell
        {
            get { return m_tpcell ?? (m_tpcell = Map.GetCell(TpCellId)); }
            set
            {
                m_tpcell = value;
                TpCellId = value.Id;
            }
        }

        [NullString]
        public uint? TpDirection
        {
            get;
            set;
        }

        [Ignore]
        public List<MonsterGrade> GroupMonsters
        {
            get;
            set;
        }
    }
}
