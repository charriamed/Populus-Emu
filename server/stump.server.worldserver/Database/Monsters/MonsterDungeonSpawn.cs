using System.Collections.Generic;
using Stump.DofusProtocol.Enums;
using Stump.ORM;
using Stump.ORM.SubSonic.SQLGeneration.Schema;
using Stump.Server.WorldServer.Game.Maps;
using Stump.Server.WorldServer.Game.Maps.Cells;
using Stump.DofusProtocol.D2oClasses;
using Stump.Server.WorldServer.Game.Actors.RolePlay.Monsters;
using System.Linq;
using System;

namespace Stump.Server.WorldServer.Database.Monsters
{
    public class MonsterDungeonSpawnRelator
    {
        public static string FetchQuery = "SELECT * FROM monsters_spawns_dungeons " +
                                          "LEFT JOIN monsters_spawns_dungeons_groups ON monsters_spawns_dungeons_groups.DungeonSpawnId = monsters_spawns_dungeons.Id " +
                                          "LEFT JOIN monsters_grades ON monsters_grades.Id = monsters_spawns_dungeons_groups.MonsterGradeId";

        public static string FetchNtm = "SELECT * FROM monsters_spawns_dungeons_groups";

        private MonsterDungeonSpawn m_current;

        public MonsterDungeonSpawn Map(MonsterDungeonSpawn spawn, MonsterDungeonSpawnEntity entity, MonsterGrade grade)
        {
            if (spawn == null)
                return m_current;

            if (m_current != null && m_current.Id == spawn.Id)
            {
                entity.MonsterGrade = grade;
                m_current.GroupMonsters.Add(entity);
                return null;
            }

            var previous = m_current;

            m_current = spawn;
            entity.MonsterGrade = grade;
            m_current.GroupMonsters.Add(entity);

            return previous;
        }
    }


    /// <summary>
    /// Only used for many to many relation
    /// </summary>
    [TableName("monsters_spawns_dungeons_groups")]
    public class MonsterDungeonSpawnEntity : IAutoGeneratedRecord
    {
        private MonsterGrade m_monsterGrade;

        public MonsterDungeonSpawnEntity()
        {

        }

        public MonsterDungeonSpawnEntity(MonsterDungeonSpawn group, MonsterGrade grade, int? minPartyMembers = null)
        {
            DungeonSpawnId = group.Id;
            MonsterGrade = grade;
            MinPartyMembers = minPartyMembers;
        }

        [PrimaryKey("Id")]
        public int Id
        {
            get;
            set;
        }

        [Index]
        public int DungeonSpawnId
        {
            get;
            set;
        }

        public int MonsterGradeId
        {
            get;
            set;
        }

        public int PossibleMonsterGradeIdsCSV
        {
            get;
            set;
        }

        public string Informations
        {
            get;
            set;
        }

        public int? MinPartyMembers
        {
            get;
            set;
        }

        [Ignore]
        public MonsterGrade MonsterGrade
        {
            get { return m_monsterGrade; }
            set
            {
                m_monsterGrade = value;
                MonsterGradeId = value.Id;
            }
        }

    }

    [TableName("monsters_spawns_dungeons")]
    public class MonsterDungeonSpawn : IAutoGeneratedRecord
    {
        public MonsterDungeonSpawn()
        {
            GroupMonsters = new List<MonsterDungeonSpawnEntity>();
        }

        private Map m_map;
        private Map m_teleportMap;

        [PrimaryKey("Id")]
        public int Id
        {
            get;
            set;
        }

        public int MapId
        {
            get;
            set;
        }

        [Ignore]
        public Map Map
        {
            get { return m_map ?? (m_map = Game.World.Instance.GetMap(MapId)); }
            set
            {
                m_map = value;
                MapId = value.Id;
            }
        }

        public int? CellId
        {
            get;
            set;
        }

        [Ignore]
        public List<MonsterDungeonSpawnEntity> GroupMonsters
        {
            get;
            set;
        }

        public bool TeleportEvent
        {
            get;
            set;
        }

        public int TeleportMapId
        {
            get;
            set;
        }

        [Ignore]
        public Map TeleportMap
        {
            get { return m_teleportMap ?? (m_teleportMap = Game.World.Instance.GetMap(TeleportMapId)); }
            set
            {
                m_teleportMap = value;
                TeleportMapId = value.Id;
            }
        }

        public short TeleportCell
        {
            get;
            set;
        }

        public DirectionsEnum TeleportDirection
        {
            get;
            set;
        }

        public ObjectPosition GetTeleportPosition()
        {
            return !TeleportEvent ? null : new ObjectPosition(TeleportMap, TeleportCell, TeleportDirection);
        }
    }

    public class MonsterDungeonWaveSpawnRelator
    {
        public static string FetchQuery = "SELECT * FROM monsters_spawns_dungeons_waves";
    }


    /// <summary>
    /// Only used for many to many relation
    /// </summary>
    [TableName("monsters_spawns_dungeons_waves")]
    public class MonsterDungeonWaveSpawnEntity : IAutoGeneratedRecord
    {
        private MonsterGrade m_monsterGrade;

        public MonsterDungeonWaveSpawnEntity()
        {

        }

        public MonsterDungeonWaveSpawnEntity(MonsterDungeonSpawn group, MonsterGrade grade, int? waveNumber, int? minPLayer = null)
        {
            DungeonSpawnId = group.Id;
            MonsterGrade = grade;
            WaveNumber = waveNumber;
            MinPlayerLevel = minPLayer;
        }

        [PrimaryKey("Id")]
        public int Id
        {
            get;
            set;
        }

        [Index]
        public int DungeonSpawnId
        {
            get;
            set;
        }

        public int MonsterGradeId
        {
            get;
            set;
        }

        public int? WaveNumber
        {
            get;
            set;
        }

        public int? MinPlayerLevel
        {
            get;
            set;
        }

        [Ignore]
        public MonsterGrade MonsterGrade
        {
            get { return m_monsterGrade; }
            set
            {
                m_monsterGrade = value;
                MonsterGradeId = value.Id;
            }
        }

    }
}