using System.Collections.Generic;
using Stump.ORM;
using Stump.ORM.Relator;
using Stump.ORM.SubSonic.SQLGeneration.Schema;
using Stump.Server.WorldServer.Database.Mounts;
using Stump.Server.WorldServer.Game.Actors.RolePlay.Mounts;
using Stump.Server.WorldServer.Game.Guilds;
using Stump.Server.WorldServer.Game.Maps;

namespace Stump.Server.WorldServer.Database.World
{
    public class WorldMapPaddockRelator : OneToManyRelator<WorldMapPaddockRecord, MountRecord>
    {
        public static string FetchQuery = "SELECT * FROM world_maps_paddock LEFT JOIN mounts ON mounts.PaddockId = world_maps_paddock.Id AND world_maps_paddock.GuildId <> NULL";
    }

    [TableName("world_maps_paddock")]
    public sealed class WorldMapPaddockRecord : IAutoGeneratedRecord, IOneToManyRecord1<MountRecord>
    {
        private Guild m_guild;
        private Map m_map;

        [PrimaryKey("Id")]
        public int Id
        {
            get;
            set;
        }

        int IJoined.JoinedId => Id;

        public int? GuildId
        {
            get;
            set;
        }

        [Ignore]
        public Guild Guild
        {
            get
            {
                if (GuildId == null)
                    return null;

                return m_guild ?? (m_guild = GuildManager.Instance.TryGetGuild(GuildId.Value));
            }
            set
            {
                m_guild = value;
                GuildId = value?.Id;
            }
        }

        public int MapId
        {
            get;
            set;
        }

        [Ignore]
        public Map Map
        {
            get
            {
                return m_map ?? (m_map = Game.World.Instance.GetMap(MapId));
            }
            set
            {
                m_map = value;
                MapId = value.Id;
            }
        }

        public uint MaxOutdoorMount
        {
            get;
            set;
        }

        public uint MaxItems
        {
            get;
            set;
        }

        public bool Abandonned
        {
            get;
            set;
        }

        public bool OnSale
        {
            get;
            set;
        }

        public bool Locked
        {
            get;
            set;
        }

        public int Price
        {
            get;
            set;
        }

        [Ignore]
        public List<MountRecord> Mounts
        {
            get;
            set;
        } = new List<MountRecord>();

        List<MountRecord> IOneToManyRecord1<MountRecord>.ManyProperty1 => Mounts;
    }
}
