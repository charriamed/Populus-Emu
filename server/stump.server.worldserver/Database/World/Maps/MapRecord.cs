using System;
using Stump.Core.IO;
using Stump.ORM;
using Stump.ORM.SubSonic.SQLGeneration.Schema;

namespace Stump.Server.WorldServer.Database.World.Maps
{
    public class MapRecordRelator
    {
        public static string FetchQuery = "SELECT * FROM world_maps " +
                                          "INNER JOIN world_maps_positions ON world_maps_positions.Id = world_maps.Id";

        public MapRecord Map(MapRecord map, MapPositionRecord position)
        {
            map.Position = position;
            position.Map = map;
            return map;
        }
    }

    [TableName("world_maps")]
    public class MapRecord : ISaveIntercepter, IAutoGeneratedRecord
    {
        private short[] m_blueCells;
        private byte[] m_compressedCells;
        private short[] m_redCells;

        [PrimaryKey("Id", false)]
        public int Id
        {
            get;
            set;
        }

        /// <summary>
        ///   Map version of this map.
        /// </summary>
        public uint Version
        {
            get;
            set;
        }

        /// <summary>
        ///   Relative id of this map.
        /// </summary>
        public uint RelativeId
        {
            get;
            set;
        }

        /// <summary>
        ///   Type of this map.
        /// </summary>
        public int MapType
        {
            get;
            set;
        }

        /// <summary>
        ///   Zone Id which owns this map.
        /// </summary>
        public int SubAreaId
        {
            get;
            set;
        }

        [Ignore]
        public MapPositionRecord Position
        {
            get;
            set;
        }

        [Ignore]
        public bool Outdoor
        {
            get { return Position != null && Position.Outdoor; }
            set { if (Position != null) Position.Outdoor = value; }
        }

        public int TopNeighbourId
        {
            get;
            set;
        }

        public int BottomNeighbourId
        {
            get;
            set;
        }

        public int LeftNeighbourId
        {
            get;
            set;
        }

        public int RightNeighbourId
        {
            get;
            set;
        }

        public short? TopNeighbourCellId
        {
            get;
            set;
        }

        public short? BottomNeighbourCellId
        {
            get;
            set;
        }

        public short? LeftNeighbourCellId
        {
            get;
            set;
        }

        public short? RightNeighbourCellId
        {
            get;
            set;
        }

        public int ClientTopNeighbourId
        {
            get;
            set;
        }

        public int ClientBottomNeighbourId
        {
            get;
            set;
        }

        public int ClientLeftNeighbourId
        {
            get;
            set;
        }

        public int ClientRightNeighbourId
        {
            get;
            set;
        }

        public uint ShadowBonusOnEntities
        {
            get;
            set;
        }

        public bool UseLowpassFilter
        {
            get;
            set;
        }

        public bool UseReverb
        {
            get;
            set;
        }

        public int PresetId
        {
            get;
            set;
        }

        [NullString]
        public string BlueCellsCSV
        {
            get;
            set;
        }

        [NullString]
        public string RedCellsCSV
        {
            get;
            set;
        }

        [Ignore]
        public short[] BlueFightCells
        {
            get
            {
                return BlueCellsCSV == null
                           ? new short[0]
                           : (m_blueCells ?? (m_blueCells = BlueCellsCSV.FromCSV<short>(",")));
            }
            set
            {
                m_blueCells = value;
                BlueCellsCSV = value?.ToCSV(",");
            }
        }

        [Ignore]
        public short[] RedFightCells
        {
            get
            {
                return RedCellsCSV == null
                           ? new short[0]
                           : (m_redCells ?? (m_redCells = RedCellsCSV.FromCSV<short>(",")));
            }
            set
            {
                m_redCells = value;
                RedCellsCSV = value?.ToCSV(",");
            }
        }

        public byte[] CompressedCells
        {
            get { return m_compressedCells; }
            set
            {
                m_compressedCells = value;
                byte[] uncompressedCells = ZipHelper.Uncompress(m_compressedCells);

                Cells = new Cell[uncompressedCells.Length / Cell.StructSize];
                for (int i = 0, j = 0; i < uncompressedCells.Length; i += Cell.StructSize, j++)
                {
                    Cells[j] = new Cell((int)this.Version);
                    Cells[j].Deserialize(uncompressedCells, i);
                }
            }
        }


        [Ignore]
        public Cell[] Cells
        {
            get;
            private set;
        }

        public bool SpawnDisabled
        {
            get;
            set;
        }

        public bool IsInstantiated
        {
            get;
            set;
        }

        #region ISaveIntercepter Members

        public void BeforeSave(bool insert)
        {
            m_compressedCells = new byte[Cells.Length * Cell.StructSize];

            for (int i = 0; i < Cells.Length; i++)
            {
                Array.Copy(Cells[i].Serialize(), 0, m_compressedCells, i * Cell.StructSize, Cell.StructSize);
            }

            m_compressedCells = ZipHelper.Compress(m_compressedCells);
        }

        #endregion
    }
}