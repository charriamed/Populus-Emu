using System;
using Stump.DofusProtocol.Enums;
using Stump.ORM;
using Stump.ORM.SubSonic.SQLGeneration.Schema;
using Stump.Server.BaseServer.Database;
using Stump.Server.WorldServer.Game.Actors.RolePlay.Characters;
using Stump.Server.WorldServer.Game.Conditions;
using Stump.Server.WorldServer.Game.Maps.Cells;
using Stump.Server.WorldServer.Game.Maps.Cells.Triggers;

namespace Stump.Server.WorldServer.Database.World.Triggers
{
    public class CellTriggerRecordRelator
    {
        public static string FetchQuery = "SELECT * FROM world_maps_triggers";
    }

    [TableName("world_maps_triggers")]
    public class CellTriggerRecord : ParameterizableRecord, IAutoGeneratedRecord
    {
        private short m_cellId;
        private string m_condition;
        private ConditionExpression m_conditionExpression;
        private int m_mapId;
        private bool m_mustRefreshPosition;
        private ObjectPosition m_position;

        [PrimaryKey("Id")]
        public int Id
        {
            get;
            set;
        }

        public string Type
        {
            get;
            set;
        }

        public short CellId
        {
            get { return m_cellId; }
            set
            {
                m_cellId = value;
                m_mustRefreshPosition = true;
            }
        }

        public int MapId
        {
            get { return m_mapId; }
            set
            {
                m_mapId = value;
                m_mustRefreshPosition = true;
            }
        }

        public CellTriggerType TriggerType
        {
            get;
            set;
        }

        [NullString]
        public string Condition
        {
            get { return m_condition; }
            set
            {
                m_condition = value;
                m_conditionExpression = null;
            }
        }

        [Ignore]
        public ConditionExpression ConditionExpression
        {
            get
            {
                if (string.IsNullOrEmpty(Condition) || Condition == "null")
                    return null;

                return m_conditionExpression ?? (m_conditionExpression = ConditionExpression.Parse(Condition));
            }
            set
            {
                m_conditionExpression = value;
                Condition = value.ToString();
            }
        }

        public bool IsConditionFilled(Character character)
        {
            return ConditionExpression == null || ConditionExpression.Eval(character);
        }

        private void RefreshPosition()
        {
            var map = Game.World.Instance.GetMap(MapId);

            if (map == null)
                throw new Exception(string.Format("Cannot load CellTrigger id={0}, map {1} isn't found", Id, MapId));

            var cell = map.Cells[CellId];

            m_position = new ObjectPosition(map, cell, DirectionsEnum.DIRECTION_EAST);
        }

        public ObjectPosition GetPosition()
        {
            if (m_position == null || m_mustRefreshPosition)
                RefreshPosition();

            m_mustRefreshPosition = false;

            return m_position;
        }

        public CellTrigger GenerateTrigger()
        {
            return DiscriminatorManager<CellTrigger>.Instance.Generate(Type, this);
        }
    }
}