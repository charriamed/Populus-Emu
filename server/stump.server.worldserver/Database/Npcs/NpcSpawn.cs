using System;
using Stump.DofusProtocol.Enums;
using Stump.ORM;
using Stump.ORM.SubSonic.SQLGeneration.Schema;
using Stump.Server.WorldServer.Database.World;
using Stump.Server.WorldServer.Game.Actors.Look;
using Stump.Server.WorldServer.Game.Actors.RolePlay.Npcs;
using Stump.Server.WorldServer.Game.Maps;
using Stump.Server.WorldServer.Game.Maps.Cells;

namespace Stump.Server.WorldServer.Database.Npcs
{
    public class NpcSpawnRelator
    {
        public static string FetchQuery = "SELECT * FROM npcs_spawns";
    }

    [TableName("npcs_spawns")]
    public class NpcSpawn : IAutoGeneratedRecord
    {
        private ActorLook m_entityLook;
        private string m_lookAsString;
        private NpcTemplate m_template;

        public uint Id
        {
            get;
            set;
        }

        public int NpcId
        {
            get;
            set;
        }

        [Ignore]
        public NpcTemplate Template
        {
            get { return m_template ?? (m_template = NpcManager.Instance.GetNpcTemplate(NpcId)); }
            set
            {
                m_template = value;
                NpcId = value.Id;
            }
        }

        public int MapId
        {
            get;
            set;
        }

        public int CellId
        {
            get;
            set;
        }

        public DirectionsEnum Direction
        {
            get;
            set;
        }


        private string LookAsString
        {
            get
            {
                if (m_entityLook == null)
                    return string.Empty;

                if (string.IsNullOrEmpty(m_lookAsString))
                    m_lookAsString = Look.ToString();

                return m_lookAsString;
            }
            set
            {
                m_lookAsString = value;

                if (value != null)
                    m_entityLook = ActorLook.Parse(m_lookAsString);
            }
        }

        [Ignore]
        public ActorLook Look
        {
            get { return m_entityLook ?? Template.Look; }
            set
            {
                m_entityLook = value;

                if (value != null)
                    m_lookAsString = value.ToString();
            }
        }

        public ObjectPosition GetPosition()
        {
            Map map = Game.World.Instance.GetMap(MapId);

            if (map == null)
                throw new Exception(string.Format("Cannot load NpcSpawn id={0}, map {1} isn't found", Id, MapId));

            Cell cell = map.Cells[CellId];

            return new ObjectPosition(map, cell, Direction);
        }
    }
}